import random as rd


len = 10
generation = 0
bw = 0.6


module tree
module arm, curve
module branch, leaf

Axiom: SetWidth(0.5)F(1,bw)curve(15,15)F(1.5,bw-0.1)curve(15,15)F(1,bw-0.15)curve(15,15)F(1,bw-0.2)curve(15,15)F(1,bw-0.25)curve(15,15)F(2,bw-0.32)curve(15,15)F(1,bw-0.35)curve(15,15)tree(1)

derivation length: 15
production:



tree(t):
  nproduce (
	  curve(15,15)F(rd.uniform(0.3,1))
	  [ 
	  		[
		  		F(rd.uniform(0.01,0.2))-(90)arm(t)] 
				F(rd.uniform(0.01,0.2))[+(90)arm(t)]
				F(rd.uniform(0.01,0.2))[^(90)arm(t)]
				F(rd.uniform(0.01,0.2))[&(90)arm(t)]
		  ]
  )
  if t<len:
    produce tree(t+1)
  else:
    for _ in range(4):
        nproduce [arm(4)]


arm(t):
  nproduce [curve(25,25)branch(t)]branch(t)
  if t<len:
    produce arm(t+1)


branch(t):
  nproduce SetWidth(min(0.3/t,0.1))+(rd.uniform(-25,25)) &(rd.uniform(-25,25)) F leaf(1) leaf(1)


leaf(t):
  nproduce [-(rd.randint(-100,100))&(rd.randint(-100,100));~l(rd.uniform(0.25,0.75))] [SetColor(166,25,12) @O(0.08)]


curve(r,p):
  nproduce -(rd.randint(-r,r))&(rd.randint(-p,p))

interpretation:




endlsystem
