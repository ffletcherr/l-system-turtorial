from random import uniform as uni
from random import randint as rint

t1_fprob = 0.3
t1_len = 10
t1_generation = 0
t1_bw = 0.6
t1_fisize1, t1_fisize2 = 0.2, 0.4
t1_fosize1, t1_fosize2 = 0.1, 0.2
t1_lisize1, t1_lisize2 = 0.1,0.9
t1_losize1, t1_losize2 = 0.25, 0.75

t2_len = 35
t2_leaflen = 1.5
t2_leafsize = 0.03
t2_bdlen1, t2_bdlen2 = 0.5, 1.5
t2_bcount1, t2_bcount2 = 6,12
t2_basesize = 0.04

t4_crvA1 = 50
t4_crvA2 = 90
t4_fprob = 0.1
t4_fisize1, t4_fisize2 = 0.1, 0.7
t4_fosize1, t4_fosize2 = 0.3,0.6
t4_lisize1, t4_lisize2 = 0.1,0.9
t4_losize1, t4_losize2 = 0.1,2

t5_r1 = -25
t5_r2 = 25
t5_t1 = -25
t5_t2 = 25
t5_k = 25
t5_lisize1, t5_lisize2 = 0.1,0.9
t5_losize1, t5_losize2 = 0.45, 0.9
t5_thlen1, t5_thlen2 = 17,45 


trunkCp = 0.9
branchCp = 0.3
branchBp = 0.6
crownBp = 0.8
crownDensity = 15
baseW = 0.3
age = 45
crv1, crv2 = 25, 25

step = 25
Axiom: [tree1()]MoveTo(step,step,0)[tree2()]MoveTo(-step,-step,0)[tree3()]MoveTo(-step,step,0)[tree4()]MoveTo(step,-step,0)[tree5()]MoveTo(-2*step,-step,0)[tree6()]MoveTo(-step,-2*step,0)[tree6()]

derivation length: 200
production:

###### Tree 6 ######

tree6():
  produce SetWidth(baseW)@GcF(8, baseW/2)t6_tree(age)@Ge

t6_tree(k):
  if uni(0,1) < trunkCp:
    nproduce F(uni(0.5, 1))
  if uni(0,1) < branchBp:
    nproduce [\(uni(-180, 180))+(uni(35, 55))F  curve(crv1, crv2) subtree(k-3)]
  if uni(0,1) < branchBp:
    nproduce [/(uni(-180, 180))+(uni(35, 55))F curve(crv1, crv2) subtree(k-3)]
  if k >= 0:
    nproduce [t6_tree(k-1)]
  else:
    produce [subtree(1)]

subtree(k):
  nproduce   SetWidth(baseW/4)
  if uni(0,1) < branchCp:
    nproduce curve(crv1, crv2) F
  if uni(0,1) < crownBp:
    nproduce [\(uni(-180, 180))+(uni(35, 55))F [crown(crownDensity)]]
  if uni(0,1) < crownBp:
    nproduce [/(uni(-180, 180))+(uni(35, 55))F [crown(crownDensity)]]
  if k >= 0: 
    nproduce [subtree(k-1)]
  else:
    produce [crown(15)]

crown(k):
  nproduce  SetWidth(baseW/8)
  for _ in range(k):
    nproduce randrot(-180,180,-180,180) leaf(0.01, 0.08, 0.1, 0.5)


###### Tree 5 ######

tree5():
  produce SetWidth(0.5)SetColor(88,60,30)Bid(rint(8,15))

Bid(t):
	for _ in range(t):
	  nproduce [MoveRel(uni(-1,1),uni(-1,1),0) @Gc randrot(-180,180,0,15)F(15, 0.3)randrot(-180,180,0,40)curve(5,5)F(15,0.2)@Ge t5_A(5, t5_k)]
  

t5_A(t, k):
  for degree in range(0,360,360//k):
  		nproduce SetColor(70,80,60)[\(degree + uni(-25,25)) F(1)SetColor(60,80,60)F(2) set(rint(4,6), uni(0.01,0.05))]


set(k, width):
  for i in range(k):
    nproduce +(uni(20,30))F(2, width) leaf(t5_lisize1, t5_lisize2, t5_losize1, t5_losize2)
  nproduce thread(rint(t5_thlen1, t5_thlen2))

thread(l):
  nproduce SetColor(60,100,60)ptDw()
  for _ in range(l):
    nproduce curve(5,5)F leaf(t5_lisize1, t5_lisize2, t5_losize1, t5_losize2)


###### Tree 4 ######

tree4():
  produce SetWidth(0.5) SetColor(60,60,50) curve(15,15) F(8,0.2) t4_A(5)

t4_A(t):
  nproduce SetWidth(0.08*(t**0.5))randrot(-180,180,0,40)F(3)[upBranch(5)]
  if t > 0 :
    produce t4_A(t-1)

upBranch(t):
	nproduce [upCurve(rint(3,6),rint(t4_crvA1,t4_crvA2),rint(3,6))]/(uni(-180,180))upCurve(rint(3,6),rint(t4_crvA1,t4_crvA2),rint(3,6))
	if t > 0 :
	  produce upBranch(t-1)
	

upCurve(k, r, a):
	nproduce ptUp() +(r)F(uni(0.1,2))
	for _ in range(k):
	  nproduce (
		  -(a+uni(-5,5))F(uni(0.1,2))
		  [
			  randrot(-180,180,0,40) F leaf(t4_lisize1, t4_lisize2, t4_losize1, t4_losize2) 
			  [fruit(t4_fisize1, t4_fisize2, t4_fosize1, t4_fosize2, t4_fprob)]
		  ]
	  )



###### Tree 3 ######

tree3():
  produce SetWidth(0.8)F(3,0.55)F(1,0.4)t3_A(15)

t3_A(t):
  nproduce F(uni(0.5,2))[randrot(-180,180,65,85)t3_B(rint(t,t+4))]
  if t > 0 :
    produce t3_A(t-1)
  else:
    produce C(3)


t3_B(t):
  nproduce SetWidth(0.2)curve(5,5)F(uni(0.1,1))
  if uni(0,1) < 0.3:
    nproduce C(2)
  if t > 0 :
    produce t3_B(t-1)
  else:
    produce C(2)
    
C(w):
  if w > 0:
    for _ in range(5):
      nproduce [;randrot(-180,180,-100,2)F(uni(0.5,2),0.08)[F(uni(1,3),0.03)F(uni(1,3))]]C(w-1)
 

curve(r,p):
  nproduce -(rint(-r,r))&(rint(-p,p))

randrot(r1,r2,t1,t2):
	produce  /(uni(r1,r2))+(uni(t1,t2))

###### Tree 2 ######

tree2():
  produce SetColor(80, 70, 55)SetWidth((t2_len-3)*t2_basesize)FFt2_A(t2_len)


t2_A(w):
  nproduce -(uni(-2,2))F(1,(w-w/4)*t2_basesize)[SetWidth(0.05)t2_B(w)]
  if w > 0:
    produce t2_A(w-1)
  else:
    produce Ft2_C(10)
    
t2_B(w):
  num = rint(t2_bcount1, t2_bcount2)
  for degree in range(0, 360, 360//num):
    degree = degree + uni(-30,30)
    nproduce [F(uni(1,3)) /(degree)-(80 + uni(-10,10) )F(uni(t2_bdlen1, t2_bdlen2))t2_C(w+5)]
  if w < 2:
    for _ in range(3):
	    nproduce  [F(3) randrot(-180,180,-45,45)t2_C(6)] [F(3) randrot(-180,180,-45,45)t2_C(6)]

t2_C(w):
  for _ in range(w):
    nproduce [SetColor(22, 55, 9)SetWidth(0.03)[\(15)+(25)F(t2_leaflen,t2_leafsize)][/(75)+(25)F(t2_leaflen,t2_leafsize)]]/(uni(15,35))F(0.3)

###### Tree 1 ######

tree1():
  produce SetWidth(0.5) @Gc t1_A() t1_tree(1) @Ge

t1_A():
  nproduce (
  F(1,t1_bw)curve(15,15)
  F(1.5,t1_bw-0.1)curve(15,15)
  F(1,t1_bw-0.15)curve(15,15)
  F(1,t1_bw-0.2)curve(15,15)
  F(1,t1_bw-0.25)curve(15,15)
  F(2,t1_bw-0.32)curve(15,15)
  F(1,t1_bw-0.35)curve(15,15)
  )

t1_tree(t):
  nproduce (
	  curve(15,15)F(uni(0.3,1))
	  [ 
	  		[
		  		F(uni(0.01,0.2))-(90)t1_arm(t)] 
				F(uni(0.01,0.2))[+(90)t1_arm(t)]
				F(uni(0.01,0.2))[^(90)t1_arm(t)]
				F(uni(0.01,0.2))[&(90)t1_arm(t)]
		  ]
  )
  if t<t1_len:
    produce t1_tree(t+1)
  else:
    for _ in range(4):
        nproduce [t1_arm(4)]


t1_arm(t):
  nproduce [curve(25,25)branch(t)]branch(t)
  if t<t1_len:
    produce t1_arm(t+1)


branch(t):
  nproduce SetWidth(min(0.3/t,0.1))+(uni(-25,25)) &(uni(-25,25)) F 
  for _ in range(2):
    nproduce leaf(t1_lisize1,t1_lisize2,t1_losize1,t1_losize2) [fruit(t1_fisize1,t1_fisize2,t1_fosize1,t1_fosize2, t1_fprob)]


leaf(isize1, isize2, osize1, osize2):
  nproduce [[;randrot(-180,180,0,40)~l(uni(0.1,1))]F(uni(isize1, isize2))[;randrot(-180,180,0,40)~l(uni(osize1, osize2))]]

fruit(isize1, isize2, osize1, osize2, fprob):
  if uni(0,1) < fprob:
    nproduce SetWidth(0.01)ptDw()-(uni(-15,15))F(uni(isize1, isize2));;@O(uni(osize1, osize2))..
  else:
    produce


ptUp():
  produce PinpointRel(0,0,1)

ptDw():
  produce PinpointRel(0,0,-1)

curve(r,p):
  nproduce -(rint(-r,r))&(rint(-p,p))

randrot(r1,r2,t1,t2):
	produce  /(uni(r1,r2))+(uni(t1,t2))


interpretation:


endlsystem
