import random as rd


len = 15
generation = 0

module tree
module arm, curve
module branch, leaf

Axiom: SetWidth(0.5)F(1,0.4)curve(15,15)F(1.5,0.3)curve(15,15)F(1,0.25)curve(15,15)F(1,0.2)curve(15,15)F(1,0.15)curve(15,15)F(2,0.08)curve(15,15)F(1,0.05)curve(15,15)tree(1)

derivation length: 15
production:



tree(t):
  nproduce (
	  curve(15,15)F(rd.uniform(0.3,1))
	  [ 
	  		[
		  		F(rd.uniform(0.01,0.1))-(90)arm(t)] 
				F(rd.uniform(0.01,0.1))[+(90)arm(t)]
				F(rd.uniform(0.01,0.1))[^(90)arm(t)]
				F(rd.uniform(0.01,0.1))[&(90)arm(t)]
		  ]
  )
  if t<len:
    produce tree(t+1)
  else:
    produce


arm(t):
  nproduce branch(t)
  if t<len:
    produce arm(t+1)


branch(t):
  nproduce SetWidth(0.09/t)+(rd.uniform(-25,25)) &(rd.uniform(-25,25)) F leaf(1) leaf(1)


leaf(t):
  nproduce [-(rd.randint(-100,100))&(rd.randint(-100,100));~l(rd.uniform(0.15,0.45))]


curve(r,p):
  nproduce -(rd.randint(-r,r))&(rd.randint(-p,p))

interpretation:




endlsystem
